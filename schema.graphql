schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

"""whether this query should be cached (Hasura Cloud only)"""
directive @cached(
  """measured in seconds"""
  ttl: Int! = 60

  """refresh the cache entry"""
  refresh: Boolean! = false
) on QUERY

"""
Boolean expression to compare columns of type "Int". All fields are combined with logical 'AND'.
"""
input Int_comparison_exp {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  _is_null: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int!]
}

"""An object with globally unique ID"""
interface Node {
  """A globally unique identifier"""
  id: ID!
}

type PageInfo {
  endCursor: String!
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String!
}

"""
Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String

  """does the column match the given case-insensitive pattern"""
  _ilike: String
  _in: [String!]

  """
  does the column match the given POSIX regular expression, case insensitive
  """
  _iregex: String
  _is_null: Boolean

  """does the column match the given pattern"""
  _like: String
  _lt: String
  _lte: String
  _neq: String

  """does the column NOT match the given case-insensitive pattern"""
  _nilike: String
  _nin: [String!]

  """
  does the column NOT match the given POSIX regular expression, case insensitive
  """
  _niregex: String

  """does the column NOT match the given pattern"""
  _nlike: String

  """
  does the column NOT match the given POSIX regular expression, case sensitive
  """
  _nregex: String

  """does the column NOT match the given SQL regular expression"""
  _nsimilar: String

  """
  does the column match the given POSIX regular expression, case sensitive
  """
  _regex: String

  """does the column match the given SQL regular expression"""
  _similar: String
}

"""
columns and relationships of "block"
"""
type block implements Node {
  """An array relationship"""
  blocks(
    """distinct select on columns"""
    distinct_on: [block_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [block_order_by!]

    """filter the rows returned"""
    where: block_bool_exp
  ): [block!]!

  """An aggregate relationship"""
  blocks_aggregate(
    """distinct select on columns"""
    distinct_on: [block_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [block_order_by!]

    """filter the rows returned"""
    where: block_bool_exp
  ): block_aggregate!

  """An array relationship connection"""
  blocks_connection(
    after: String
    before: String

    """distinct select on columns"""
    distinct_on: [block_select_column!]
    first: Int
    last: Int

    """sort the rows by one or more columns"""
    order_by: [block_order_by!]

    """filter the rows returned"""
    where: block_bool_exp
  ): blockConnection!
  created_at: timestamptz!
  document_path: String
  id: ID!
  kind: String!
  parent_id: uuid
  post_id: uuid
  updated_at: timestamptz!
  value: String!
}

"""
A Relay connection object on "block"
"""
type blockConnection {
  edges: [blockEdge!]!
  pageInfo: PageInfo!
}

type blockEdge {
  cursor: String!
  node: block!
}

"""
aggregated selection of "block"
"""
type block_aggregate {
  aggregate: block_aggregate_fields
  nodes: [block!]!
}

"""
aggregate fields of "block"
"""
type block_aggregate_fields {
  count(columns: [block_select_column!], distinct: Boolean): Int!
  max: block_max_fields
  min: block_min_fields
}

"""
order by aggregate values of table "block"
"""
input block_aggregate_order_by {
  count: order_by
  max: block_max_order_by
  min: block_min_order_by
}

"""
input type for inserting array relation for remote table "block"
"""
input block_arr_rel_insert_input {
  data: [block_insert_input!]!

  """on conflict condition"""
  on_conflict: block_on_conflict
}

"""
Boolean expression to filter rows from the table "block". All fields are combined with a logical 'AND'.
"""
input block_bool_exp {
  _and: [block_bool_exp!]
  _not: block_bool_exp
  _or: [block_bool_exp!]
  blocks: block_bool_exp
  created_at: timestamptz_comparison_exp
  document_path: String_comparison_exp
  id: uuid_comparison_exp
  kind: String_comparison_exp
  parent_id: uuid_comparison_exp
  post_id: uuid_comparison_exp
  updated_at: timestamptz_comparison_exp
  value: String_comparison_exp
}

"""
unique or primary key constraints on table "block"
"""
enum block_constraint {
  """unique or primary key constraint"""
  block_pkey
}

"""
input type for inserting data into table "block"
"""
input block_insert_input {
  blocks: block_arr_rel_insert_input
  created_at: timestamptz
  document_path: String
  id: uuid
  kind: String
  parent_id: uuid
  post_id: uuid
  updated_at: timestamptz
  value: String
}

"""aggregate max on columns"""
type block_max_fields {
  created_at: timestamptz
  document_path: String
  id: uuid
  kind: String
  parent_id: uuid
  post_id: uuid
  updated_at: timestamptz
  value: String
}

"""
order by max() on columns of table "block"
"""
input block_max_order_by {
  created_at: order_by
  document_path: order_by
  id: order_by
  kind: order_by
  parent_id: order_by
  post_id: order_by
  updated_at: order_by
  value: order_by
}

"""aggregate min on columns"""
type block_min_fields {
  created_at: timestamptz
  document_path: String
  id: uuid
  kind: String
  parent_id: uuid
  post_id: uuid
  updated_at: timestamptz
  value: String
}

"""
order by min() on columns of table "block"
"""
input block_min_order_by {
  created_at: order_by
  document_path: order_by
  id: order_by
  kind: order_by
  parent_id: order_by
  post_id: order_by
  updated_at: order_by
  value: order_by
}

"""
response of any mutation on the table "block"
"""
type block_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [block!]!
}

"""
on conflict condition type for table "block"
"""
input block_on_conflict {
  constraint: block_constraint!
  update_columns: [block_update_column!]! = []
  where: block_bool_exp
}

"""Ordering options when selecting data from "block"."""
input block_order_by {
  blocks_aggregate: block_aggregate_order_by
  created_at: order_by
  document_path: order_by
  id: order_by
  kind: order_by
  parent_id: order_by
  post_id: order_by
  updated_at: order_by
  value: order_by
}

"""primary key columns input for table: block"""
input block_pk_columns_input {
  id: uuid!
}

"""
select columns of table "block"
"""
enum block_select_column {
  """column name"""
  created_at

  """column name"""
  document_path

  """column name"""
  id

  """column name"""
  kind

  """column name"""
  parent_id

  """column name"""
  post_id

  """column name"""
  updated_at

  """column name"""
  value
}

"""
input type for updating data in table "block"
"""
input block_set_input {
  created_at: timestamptz
  document_path: String
  id: uuid
  kind: String
  parent_id: uuid
  post_id: uuid
  updated_at: timestamptz
  value: String
}

"""
update columns of table "block"
"""
enum block_update_column {
  """column name"""
  created_at

  """column name"""
  document_path

  """column name"""
  id

  """column name"""
  kind

  """column name"""
  parent_id

  """column name"""
  post_id

  """column name"""
  updated_at

  """column name"""
  value
}

"""
columns and relationships of "brick"
"""
type brick implements Node {
  created_at: timestamptz!
  id: ID!
  int_id: Int!
  name: String!
  updated_at: timestamptz!
  value: String!
}

"""
A Relay connection object on "brick"
"""
type brickConnection {
  edges: [brickEdge!]!
  pageInfo: PageInfo!
}

type brickEdge {
  cursor: String!
  node: brick!
}

"""
Boolean expression to filter rows from the table "brick". All fields are combined with a logical 'AND'.
"""
input brick_bool_exp {
  _and: [brick_bool_exp!]
  _not: brick_bool_exp
  _or: [brick_bool_exp!]
  created_at: timestamptz_comparison_exp
  id: uuid_comparison_exp
  int_id: Int_comparison_exp
  name: String_comparison_exp
  updated_at: timestamptz_comparison_exp
  value: String_comparison_exp
}

"""
unique or primary key constraints on table "brick"
"""
enum brick_constraint {
  """unique or primary key constraint"""
  brick_pkey
}

"""
input type for incrementing numeric columns in table "brick"
"""
input brick_inc_input {
  int_id: Int
}

"""
input type for inserting data into table "brick"
"""
input brick_insert_input {
  created_at: timestamptz
  id: uuid
  int_id: Int
  name: String
  updated_at: timestamptz
  value: String
}

"""
response of any mutation on the table "brick"
"""
type brick_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [brick!]!
}

"""
on conflict condition type for table "brick"
"""
input brick_on_conflict {
  constraint: brick_constraint!
  update_columns: [brick_update_column!]! = []
  where: brick_bool_exp
}

"""Ordering options when selecting data from "brick"."""
input brick_order_by {
  created_at: order_by
  id: order_by
  int_id: order_by
  name: order_by
  updated_at: order_by
  value: order_by
}

"""primary key columns input for table: brick"""
input brick_pk_columns_input {
  id: uuid!
}

"""
select columns of table "brick"
"""
enum brick_select_column {
  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  int_id

  """column name"""
  name

  """column name"""
  updated_at

  """column name"""
  value
}

"""
input type for updating data in table "brick"
"""
input brick_set_input {
  created_at: timestamptz
  id: uuid
  int_id: Int
  name: String
  updated_at: timestamptz
  value: String
}

"""
update columns of table "brick"
"""
enum brick_update_column {
  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  int_id

  """column name"""
  name

  """column name"""
  updated_at

  """column name"""
  value
}

"""
columns and relationships of "cart_item"
"""
type cart_item implements Node {
  id: ID!
  product_id: uuid!
  store_id: uuid!
}

"""
A Relay connection object on "cart_item"
"""
type cart_itemConnection {
  edges: [cart_itemEdge!]!
  pageInfo: PageInfo!
}

type cart_itemEdge {
  cursor: String!
  node: cart_item!
}

"""
Boolean expression to filter rows from the table "cart_item". All fields are combined with a logical 'AND'.
"""
input cart_item_bool_exp {
  _and: [cart_item_bool_exp!]
  _not: cart_item_bool_exp
  _or: [cart_item_bool_exp!]
  id: uuid_comparison_exp
  product_id: uuid_comparison_exp
  store_id: uuid_comparison_exp
}

"""
unique or primary key constraints on table "cart_item"
"""
enum cart_item_constraint {
  """unique or primary key constraint"""
  cart_pkey
}

"""
input type for inserting data into table "cart_item"
"""
input cart_item_insert_input {
  id: uuid
  product_id: uuid
  store_id: uuid
}

"""
response of any mutation on the table "cart_item"
"""
type cart_item_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [cart_item!]!
}

"""
on conflict condition type for table "cart_item"
"""
input cart_item_on_conflict {
  constraint: cart_item_constraint!
  update_columns: [cart_item_update_column!]! = []
  where: cart_item_bool_exp
}

"""Ordering options when selecting data from "cart_item"."""
input cart_item_order_by {
  id: order_by
  product_id: order_by
  store_id: order_by
}

"""primary key columns input for table: cart_item"""
input cart_item_pk_columns_input {
  id: uuid!
}

"""
select columns of table "cart_item"
"""
enum cart_item_select_column {
  """column name"""
  id

  """column name"""
  product_id

  """column name"""
  store_id
}

"""
input type for updating data in table "cart_item"
"""
input cart_item_set_input {
  id: uuid
  product_id: uuid
  store_id: uuid
}

"""
update columns of table "cart_item"
"""
enum cart_item_update_column {
  """column name"""
  id

  """column name"""
  product_id

  """column name"""
  store_id
}

"""
columns and relationships of "inventory"
"""
type inventory implements Node {
  id: ID!

  """An object relationship"""
  product: product!
  product_id: uuid!
  stock_available: Int!

  """An object relationship"""
  store: store!
  store_id: uuid!
}

"""
A Relay connection object on "inventory"
"""
type inventoryConnection {
  edges: [inventoryEdge!]!
  pageInfo: PageInfo!
}

type inventoryEdge {
  cursor: String!
  node: inventory!
}

"""
aggregated selection of "inventory"
"""
type inventory_aggregate {
  aggregate: inventory_aggregate_fields
  nodes: [inventory!]!
}

"""
aggregate fields of "inventory"
"""
type inventory_aggregate_fields {
  avg: inventory_avg_fields
  count(columns: [inventory_select_column!], distinct: Boolean): Int!
  max: inventory_max_fields
  min: inventory_min_fields
  stddev: inventory_stddev_fields
  stddev_pop: inventory_stddev_pop_fields
  stddev_samp: inventory_stddev_samp_fields
  sum: inventory_sum_fields
  var_pop: inventory_var_pop_fields
  var_samp: inventory_var_samp_fields
  variance: inventory_variance_fields
}

"""
order by aggregate values of table "inventory"
"""
input inventory_aggregate_order_by {
  avg: inventory_avg_order_by
  count: order_by
  max: inventory_max_order_by
  min: inventory_min_order_by
  stddev: inventory_stddev_order_by
  stddev_pop: inventory_stddev_pop_order_by
  stddev_samp: inventory_stddev_samp_order_by
  sum: inventory_sum_order_by
  var_pop: inventory_var_pop_order_by
  var_samp: inventory_var_samp_order_by
  variance: inventory_variance_order_by
}

"""
input type for inserting array relation for remote table "inventory"
"""
input inventory_arr_rel_insert_input {
  data: [inventory_insert_input!]!

  """on conflict condition"""
  on_conflict: inventory_on_conflict
}

"""aggregate avg on columns"""
type inventory_avg_fields {
  stock_available: Float
}

"""
order by avg() on columns of table "inventory"
"""
input inventory_avg_order_by {
  stock_available: order_by
}

"""
Boolean expression to filter rows from the table "inventory". All fields are combined with a logical 'AND'.
"""
input inventory_bool_exp {
  _and: [inventory_bool_exp!]
  _not: inventory_bool_exp
  _or: [inventory_bool_exp!]
  product: product_bool_exp
  product_id: uuid_comparison_exp
  stock_available: Int_comparison_exp
  store: store_bool_exp
  store_id: uuid_comparison_exp
}

"""
unique or primary key constraints on table "inventory"
"""
enum inventory_constraint {
  """unique or primary key constraint"""
  inventory_pkey
}

"""
input type for incrementing numeric columns in table "inventory"
"""
input inventory_inc_input {
  stock_available: Int
}

"""
input type for inserting data into table "inventory"
"""
input inventory_insert_input {
  product: product_obj_rel_insert_input
  product_id: uuid
  stock_available: Int
  store: store_obj_rel_insert_input
  store_id: uuid
}

"""aggregate max on columns"""
type inventory_max_fields {
  product_id: uuid
  stock_available: Int
  store_id: uuid
}

"""
order by max() on columns of table "inventory"
"""
input inventory_max_order_by {
  product_id: order_by
  stock_available: order_by
  store_id: order_by
}

"""aggregate min on columns"""
type inventory_min_fields {
  product_id: uuid
  stock_available: Int
  store_id: uuid
}

"""
order by min() on columns of table "inventory"
"""
input inventory_min_order_by {
  product_id: order_by
  stock_available: order_by
  store_id: order_by
}

"""
response of any mutation on the table "inventory"
"""
type inventory_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [inventory!]!
}

"""
on conflict condition type for table "inventory"
"""
input inventory_on_conflict {
  constraint: inventory_constraint!
  update_columns: [inventory_update_column!]! = []
  where: inventory_bool_exp
}

"""Ordering options when selecting data from "inventory"."""
input inventory_order_by {
  product: product_order_by
  product_id: order_by
  stock_available: order_by
  store: store_order_by
  store_id: order_by
}

"""primary key columns input for table: inventory"""
input inventory_pk_columns_input {
  product_id: uuid!
  store_id: uuid!
}

"""
select columns of table "inventory"
"""
enum inventory_select_column {
  """column name"""
  product_id

  """column name"""
  stock_available

  """column name"""
  store_id
}

"""
input type for updating data in table "inventory"
"""
input inventory_set_input {
  product_id: uuid
  stock_available: Int
  store_id: uuid
}

"""aggregate stddev on columns"""
type inventory_stddev_fields {
  stock_available: Float
}

"""
order by stddev() on columns of table "inventory"
"""
input inventory_stddev_order_by {
  stock_available: order_by
}

"""aggregate stddev_pop on columns"""
type inventory_stddev_pop_fields {
  stock_available: Float
}

"""
order by stddev_pop() on columns of table "inventory"
"""
input inventory_stddev_pop_order_by {
  stock_available: order_by
}

"""aggregate stddev_samp on columns"""
type inventory_stddev_samp_fields {
  stock_available: Float
}

"""
order by stddev_samp() on columns of table "inventory"
"""
input inventory_stddev_samp_order_by {
  stock_available: order_by
}

"""aggregate sum on columns"""
type inventory_sum_fields {
  stock_available: Int
}

"""
order by sum() on columns of table "inventory"
"""
input inventory_sum_order_by {
  stock_available: order_by
}

"""
update columns of table "inventory"
"""
enum inventory_update_column {
  """column name"""
  product_id

  """column name"""
  stock_available

  """column name"""
  store_id
}

"""aggregate var_pop on columns"""
type inventory_var_pop_fields {
  stock_available: Float
}

"""
order by var_pop() on columns of table "inventory"
"""
input inventory_var_pop_order_by {
  stock_available: order_by
}

"""aggregate var_samp on columns"""
type inventory_var_samp_fields {
  stock_available: Float
}

"""
order by var_samp() on columns of table "inventory"
"""
input inventory_var_samp_order_by {
  stock_available: order_by
}

"""aggregate variance on columns"""
type inventory_variance_fields {
  stock_available: Float
}

"""
order by variance() on columns of table "inventory"
"""
input inventory_variance_order_by {
  stock_available: order_by
}

scalar money

"""
Boolean expression to compare columns of type "money". All fields are combined with logical 'AND'.
"""
input money_comparison_exp {
  _eq: money
  _gt: money
  _gte: money
  _in: [money!]
  _is_null: Boolean
  _lt: money
  _lte: money
  _neq: money
  _nin: [money!]
}

"""mutation root"""
type mutation_root {
  """
  delete data from the table: "block"
  """
  delete_block(
    """filter the rows which have to be deleted"""
    where: block_bool_exp!
  ): block_mutation_response

  """
  delete single row from the table: "block"
  """
  delete_block_by_pk(id: uuid!): block

  """
  delete data from the table: "brick"
  """
  delete_brick(
    """filter the rows which have to be deleted"""
    where: brick_bool_exp!
  ): brick_mutation_response

  """
  delete single row from the table: "brick"
  """
  delete_brick_by_pk(id: uuid!): brick

  """
  delete data from the table: "cart_item"
  """
  delete_cart_item(
    """filter the rows which have to be deleted"""
    where: cart_item_bool_exp!
  ): cart_item_mutation_response

  """
  delete single row from the table: "cart_item"
  """
  delete_cart_item_by_pk(id: uuid!): cart_item

  """
  delete data from the table: "inventory"
  """
  delete_inventory(
    """filter the rows which have to be deleted"""
    where: inventory_bool_exp!
  ): inventory_mutation_response

  """
  delete single row from the table: "inventory"
  """
  delete_inventory_by_pk(product_id: uuid!, store_id: uuid!): inventory

  """
  delete data from the table: "organization"
  """
  delete_organization(
    """filter the rows which have to be deleted"""
    where: organization_bool_exp!
  ): organization_mutation_response

  """
  delete single row from the table: "organization"
  """
  delete_organization_by_pk(id: Int!): organization

  """
  delete data from the table: "product"
  """
  delete_product(
    """filter the rows which have to be deleted"""
    where: product_bool_exp!
  ): product_mutation_response

  """
  delete single row from the table: "product"
  """
  delete_product_by_pk(id: uuid!): product

  """
  delete data from the table: "store"
  """
  delete_store(
    """filter the rows which have to be deleted"""
    where: store_bool_exp!
  ): store_mutation_response

  """
  delete single row from the table: "store"
  """
  delete_store_by_pk(id: uuid!): store

  """
  delete data from the table: "user_info"
  """
  delete_user_info(
    """filter the rows which have to be deleted"""
    where: user_info_bool_exp!
  ): user_info_mutation_response

  """
  delete single row from the table: "user_info"
  """
  delete_user_info_by_pk(id: Int!): user_info

  """
  insert data into the table: "block"
  """
  insert_block(
    """the rows to be inserted"""
    objects: [block_insert_input!]!

    """on conflict condition"""
    on_conflict: block_on_conflict
  ): block_mutation_response

  """
  insert a single row into the table: "block"
  """
  insert_block_one(
    """the row to be inserted"""
    object: block_insert_input!

    """on conflict condition"""
    on_conflict: block_on_conflict
  ): block

  """
  insert data into the table: "brick"
  """
  insert_brick(
    """the rows to be inserted"""
    objects: [brick_insert_input!]!

    """on conflict condition"""
    on_conflict: brick_on_conflict
  ): brick_mutation_response

  """
  insert a single row into the table: "brick"
  """
  insert_brick_one(
    """the row to be inserted"""
    object: brick_insert_input!

    """on conflict condition"""
    on_conflict: brick_on_conflict
  ): brick

  """
  insert data into the table: "cart_item"
  """
  insert_cart_item(
    """the rows to be inserted"""
    objects: [cart_item_insert_input!]!

    """on conflict condition"""
    on_conflict: cart_item_on_conflict
  ): cart_item_mutation_response

  """
  insert a single row into the table: "cart_item"
  """
  insert_cart_item_one(
    """the row to be inserted"""
    object: cart_item_insert_input!

    """on conflict condition"""
    on_conflict: cart_item_on_conflict
  ): cart_item

  """
  insert data into the table: "inventory"
  """
  insert_inventory(
    """the rows to be inserted"""
    objects: [inventory_insert_input!]!

    """on conflict condition"""
    on_conflict: inventory_on_conflict
  ): inventory_mutation_response

  """
  insert a single row into the table: "inventory"
  """
  insert_inventory_one(
    """the row to be inserted"""
    object: inventory_insert_input!

    """on conflict condition"""
    on_conflict: inventory_on_conflict
  ): inventory

  """
  insert data into the table: "organization"
  """
  insert_organization(
    """the rows to be inserted"""
    objects: [organization_insert_input!]!

    """on conflict condition"""
    on_conflict: organization_on_conflict
  ): organization_mutation_response

  """
  insert a single row into the table: "organization"
  """
  insert_organization_one(
    """the row to be inserted"""
    object: organization_insert_input!

    """on conflict condition"""
    on_conflict: organization_on_conflict
  ): organization

  """
  insert data into the table: "product"
  """
  insert_product(
    """the rows to be inserted"""
    objects: [product_insert_input!]!

    """on conflict condition"""
    on_conflict: product_on_conflict
  ): product_mutation_response

  """
  insert a single row into the table: "product"
  """
  insert_product_one(
    """the row to be inserted"""
    object: product_insert_input!

    """on conflict condition"""
    on_conflict: product_on_conflict
  ): product

  """
  insert data into the table: "store"
  """
  insert_store(
    """the rows to be inserted"""
    objects: [store_insert_input!]!

    """on conflict condition"""
    on_conflict: store_on_conflict
  ): store_mutation_response

  """
  insert a single row into the table: "store"
  """
  insert_store_one(
    """the row to be inserted"""
    object: store_insert_input!

    """on conflict condition"""
    on_conflict: store_on_conflict
  ): store

  """
  insert data into the table: "user_info"
  """
  insert_user_info(
    """the rows to be inserted"""
    objects: [user_info_insert_input!]!

    """on conflict condition"""
    on_conflict: user_info_on_conflict
  ): user_info_mutation_response

  """
  insert a single row into the table: "user_info"
  """
  insert_user_info_one(
    """the row to be inserted"""
    object: user_info_insert_input!

    """on conflict condition"""
    on_conflict: user_info_on_conflict
  ): user_info

  """
  update data of the table: "block"
  """
  update_block(
    """sets the columns of the filtered rows to the given values"""
    _set: block_set_input

    """filter the rows which have to be updated"""
    where: block_bool_exp!
  ): block_mutation_response

  """
  update single row of the table: "block"
  """
  update_block_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: block_set_input
    pk_columns: block_pk_columns_input!
  ): block

  """
  update data of the table: "brick"
  """
  update_brick(
    """increments the numeric columns with given value of the filtered values"""
    _inc: brick_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: brick_set_input

    """filter the rows which have to be updated"""
    where: brick_bool_exp!
  ): brick_mutation_response

  """
  update single row of the table: "brick"
  """
  update_brick_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: brick_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: brick_set_input
    pk_columns: brick_pk_columns_input!
  ): brick

  """
  update data of the table: "cart_item"
  """
  update_cart_item(
    """sets the columns of the filtered rows to the given values"""
    _set: cart_item_set_input

    """filter the rows which have to be updated"""
    where: cart_item_bool_exp!
  ): cart_item_mutation_response

  """
  update single row of the table: "cart_item"
  """
  update_cart_item_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: cart_item_set_input
    pk_columns: cart_item_pk_columns_input!
  ): cart_item

  """
  update data of the table: "inventory"
  """
  update_inventory(
    """increments the numeric columns with given value of the filtered values"""
    _inc: inventory_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: inventory_set_input

    """filter the rows which have to be updated"""
    where: inventory_bool_exp!
  ): inventory_mutation_response

  """
  update single row of the table: "inventory"
  """
  update_inventory_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: inventory_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: inventory_set_input
    pk_columns: inventory_pk_columns_input!
  ): inventory

  """
  update data of the table: "organization"
  """
  update_organization(
    """increments the numeric columns with given value of the filtered values"""
    _inc: organization_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: organization_set_input

    """filter the rows which have to be updated"""
    where: organization_bool_exp!
  ): organization_mutation_response

  """
  update single row of the table: "organization"
  """
  update_organization_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: organization_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: organization_set_input
    pk_columns: organization_pk_columns_input!
  ): organization

  """
  update data of the table: "product"
  """
  update_product(
    """increments the numeric columns with given value of the filtered values"""
    _inc: product_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: product_set_input

    """filter the rows which have to be updated"""
    where: product_bool_exp!
  ): product_mutation_response

  """
  update single row of the table: "product"
  """
  update_product_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: product_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: product_set_input
    pk_columns: product_pk_columns_input!
  ): product

  """
  update data of the table: "store"
  """
  update_store(
    """sets the columns of the filtered rows to the given values"""
    _set: store_set_input

    """filter the rows which have to be updated"""
    where: store_bool_exp!
  ): store_mutation_response

  """
  update single row of the table: "store"
  """
  update_store_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: store_set_input
    pk_columns: store_pk_columns_input!
  ): store

  """
  update data of the table: "user_info"
  """
  update_user_info(
    """increments the numeric columns with given value of the filtered values"""
    _inc: user_info_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: user_info_set_input

    """filter the rows which have to be updated"""
    where: user_info_bool_exp!
  ): user_info_mutation_response

  """
  update single row of the table: "user_info"
  """
  update_user_info_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: user_info_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: user_info_set_input
    pk_columns: user_info_pk_columns_input!
  ): user_info
}

"""column ordering options"""
enum order_by {
  """in ascending order, nulls last"""
  asc

  """in ascending order, nulls first"""
  asc_nulls_first

  """in ascending order, nulls last"""
  asc_nulls_last

  """in descending order, nulls first"""
  desc

  """in descending order, nulls first"""
  desc_nulls_first

  """in descending order, nulls last"""
  desc_nulls_last
}

"""
columns and relationships of "organization"
"""
type organization implements Node {
  id: ID!
  organization: String!

  """
  A computed field, executes function "organization_descendant_users"
  """
  organization_descendant_users(
    """distinct select on columns"""
    distinct_on: [user_info_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_info_order_by!]

    """filter the rows returned"""
    where: user_info_bool_exp
  ): [user_info!]
  parent: Int
}

"""
A Relay connection object on "organization"
"""
type organizationConnection {
  edges: [organizationEdge!]!
  pageInfo: PageInfo!
}

type organizationEdge {
  cursor: String!
  node: organization!
}

"""
Boolean expression to filter rows from the table "organization". All fields are combined with a logical 'AND'.
"""
input organization_bool_exp {
  _and: [organization_bool_exp!]
  _not: organization_bool_exp
  _or: [organization_bool_exp!]
  id: Int_comparison_exp
  organization: String_comparison_exp
  organization_descendant_users: user_info_bool_exp
  parent: Int_comparison_exp
}

"""
unique or primary key constraints on table "organization"
"""
enum organization_constraint {
  """unique or primary key constraint"""
  organization_pkey
}

input organization_descendant_users_args {
  organization_row: organization_scalar
}

"""
input type for incrementing numeric columns in table "organization"
"""
input organization_inc_input {
  id: Int
  parent: Int
}

"""
input type for inserting data into table "organization"
"""
input organization_insert_input {
  id: Int
  organization: String
  parent: Int
}

"""
response of any mutation on the table "organization"
"""
type organization_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [organization!]!
}

"""
on conflict condition type for table "organization"
"""
input organization_on_conflict {
  constraint: organization_constraint!
  update_columns: [organization_update_column!]! = []
  where: organization_bool_exp
}

"""Ordering options when selecting data from "organization"."""
input organization_order_by {
  id: order_by
  organization: order_by
  organization_descendant_users_aggregate: user_info_aggregate_order_by
  parent: order_by
}

"""primary key columns input for table: organization"""
input organization_pk_columns_input {
  id: Int!
}

scalar organization_scalar

"""
select columns of table "organization"
"""
enum organization_select_column {
  """column name"""
  id

  """column name"""
  organization

  """column name"""
  parent
}

"""
input type for updating data in table "organization"
"""
input organization_set_input {
  id: Int
  organization: String
  parent: Int
}

"""
update columns of table "organization"
"""
enum organization_update_column {
  """column name"""
  id

  """column name"""
  organization

  """column name"""
  parent
}

"""
columns and relationships of "product"
"""
type product implements Node {
  id: ID!
  name: String
  price: money

  """An array relationship"""
  product_inventory(
    """distinct select on columns"""
    distinct_on: [inventory_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [inventory_order_by!]

    """filter the rows returned"""
    where: inventory_bool_exp
  ): [inventory!]!

  """An aggregate relationship"""
  product_inventory_aggregate(
    """distinct select on columns"""
    distinct_on: [inventory_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [inventory_order_by!]

    """filter the rows returned"""
    where: inventory_bool_exp
  ): inventory_aggregate!

  """An array relationship connection"""
  product_inventory_connection(
    after: String
    before: String

    """distinct select on columns"""
    distinct_on: [inventory_select_column!]
    first: Int
    last: Int

    """sort the rows by one or more columns"""
    order_by: [inventory_order_by!]

    """filter the rows returned"""
    where: inventory_bool_exp
  ): inventoryConnection!
}

"""
A Relay connection object on "product"
"""
type productConnection {
  edges: [productEdge!]!
  pageInfo: PageInfo!
}

type productEdge {
  cursor: String!
  node: product!
}

"""
Boolean expression to filter rows from the table "product". All fields are combined with a logical 'AND'.
"""
input product_bool_exp {
  _and: [product_bool_exp!]
  _not: product_bool_exp
  _or: [product_bool_exp!]
  id: uuid_comparison_exp
  name: String_comparison_exp
  price: money_comparison_exp
  product_inventory: inventory_bool_exp
}

"""
unique or primary key constraints on table "product"
"""
enum product_constraint {
  """unique or primary key constraint"""
  product_pkey
}

"""
input type for incrementing numeric columns in table "product"
"""
input product_inc_input {
  price: money
}

"""
input type for inserting data into table "product"
"""
input product_insert_input {
  id: uuid
  name: String
  price: money
  product_inventory: inventory_arr_rel_insert_input
}

"""
response of any mutation on the table "product"
"""
type product_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [product!]!
}

"""
input type for inserting object relation for remote table "product"
"""
input product_obj_rel_insert_input {
  data: product_insert_input!

  """on conflict condition"""
  on_conflict: product_on_conflict
}

"""
on conflict condition type for table "product"
"""
input product_on_conflict {
  constraint: product_constraint!
  update_columns: [product_update_column!]! = []
  where: product_bool_exp
}

"""Ordering options when selecting data from "product"."""
input product_order_by {
  id: order_by
  name: order_by
  price: order_by
  product_inventory_aggregate: inventory_aggregate_order_by
}

"""primary key columns input for table: product"""
input product_pk_columns_input {
  id: uuid!
}

"""
select columns of table "product"
"""
enum product_select_column {
  """column name"""
  id

  """column name"""
  name

  """column name"""
  price
}

"""
input type for updating data in table "product"
"""
input product_set_input {
  id: uuid
  name: String
  price: money
}

"""
update columns of table "product"
"""
enum product_update_column {
  """column name"""
  id

  """column name"""
  name

  """column name"""
  price
}

type query_root {
  """
  fetch data from the table: "block"
  """
  block_connection(
    after: String
    before: String

    """distinct select on columns"""
    distinct_on: [block_select_column!]
    first: Int
    last: Int

    """sort the rows by one or more columns"""
    order_by: [block_order_by!]

    """filter the rows returned"""
    where: block_bool_exp
  ): blockConnection!

  """
  fetch data from the table: "brick"
  """
  brick_connection(
    after: String
    before: String

    """distinct select on columns"""
    distinct_on: [brick_select_column!]
    first: Int
    last: Int

    """sort the rows by one or more columns"""
    order_by: [brick_order_by!]

    """filter the rows returned"""
    where: brick_bool_exp
  ): brickConnection!

  """
  fetch data from the table: "cart_item"
  """
  cart_item_connection(
    after: String
    before: String

    """distinct select on columns"""
    distinct_on: [cart_item_select_column!]
    first: Int
    last: Int

    """sort the rows by one or more columns"""
    order_by: [cart_item_order_by!]

    """filter the rows returned"""
    where: cart_item_bool_exp
  ): cart_itemConnection!

  """
  fetch data from the table: "inventory"
  """
  inventory_connection(
    after: String
    before: String

    """distinct select on columns"""
    distinct_on: [inventory_select_column!]
    first: Int
    last: Int

    """sort the rows by one or more columns"""
    order_by: [inventory_order_by!]

    """filter the rows returned"""
    where: inventory_bool_exp
  ): inventoryConnection!
  node(
    """A globally unique id"""
    id: ID!
  ): Node

  """
  fetch data from the table: "organization"
  """
  organization_connection(
    after: String
    before: String

    """distinct select on columns"""
    distinct_on: [organization_select_column!]
    first: Int
    last: Int

    """sort the rows by one or more columns"""
    order_by: [organization_order_by!]

    """filter the rows returned"""
    where: organization_bool_exp
  ): organizationConnection!

  """
  execute function "organization_descendant_users" which returns "user_info"
  """
  organization_descendant_users_connection(
    after: String

    """
    input parameters for function "organization_descendant_users"
    """
    args: organization_descendant_users_args!
    before: String

    """distinct select on columns"""
    distinct_on: [user_info_select_column!]
    first: Int
    last: Int

    """sort the rows by one or more columns"""
    order_by: [user_info_order_by!]

    """filter the rows returned"""
    where: user_info_bool_exp
  ): user_infoConnection!

  """
  fetch data from the table: "product"
  """
  product_connection(
    after: String
    before: String

    """distinct select on columns"""
    distinct_on: [product_select_column!]
    first: Int
    last: Int

    """sort the rows by one or more columns"""
    order_by: [product_order_by!]

    """filter the rows returned"""
    where: product_bool_exp
  ): productConnection!

  """
  fetch data from the table: "store"
  """
  store_connection(
    after: String
    before: String

    """distinct select on columns"""
    distinct_on: [store_select_column!]
    first: Int
    last: Int

    """sort the rows by one or more columns"""
    order_by: [store_order_by!]

    """filter the rows returned"""
    where: store_bool_exp
  ): storeConnection!

  """
  fetch data from the table: "user_info"
  """
  user_info_connection(
    after: String
    before: String

    """distinct select on columns"""
    distinct_on: [user_info_select_column!]
    first: Int
    last: Int

    """sort the rows by one or more columns"""
    order_by: [user_info_order_by!]

    """filter the rows returned"""
    where: user_info_bool_exp
  ): user_infoConnection!
}

"""
columns and relationships of "store"
"""
type store implements Node {
  address: String
  created_at: timestamptz!
  id: ID!
  name: String

  """An array relationship"""
  store_inventory(
    """distinct select on columns"""
    distinct_on: [inventory_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [inventory_order_by!]

    """filter the rows returned"""
    where: inventory_bool_exp
  ): [inventory!]!

  """An aggregate relationship"""
  store_inventory_aggregate(
    """distinct select on columns"""
    distinct_on: [inventory_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [inventory_order_by!]

    """filter the rows returned"""
    where: inventory_bool_exp
  ): inventory_aggregate!

  """An array relationship connection"""
  store_inventory_connection(
    after: String
    before: String

    """distinct select on columns"""
    distinct_on: [inventory_select_column!]
    first: Int
    last: Int

    """sort the rows by one or more columns"""
    order_by: [inventory_order_by!]

    """filter the rows returned"""
    where: inventory_bool_exp
  ): inventoryConnection!
}

"""
A Relay connection object on "store"
"""
type storeConnection {
  edges: [storeEdge!]!
  pageInfo: PageInfo!
}

type storeEdge {
  cursor: String!
  node: store!
}

"""
Boolean expression to filter rows from the table "store". All fields are combined with a logical 'AND'.
"""
input store_bool_exp {
  _and: [store_bool_exp!]
  _not: store_bool_exp
  _or: [store_bool_exp!]
  address: String_comparison_exp
  created_at: timestamptz_comparison_exp
  id: uuid_comparison_exp
  name: String_comparison_exp
  store_inventory: inventory_bool_exp
}

"""
unique or primary key constraints on table "store"
"""
enum store_constraint {
  """unique or primary key constraint"""
  store_pkey
}

"""
input type for inserting data into table "store"
"""
input store_insert_input {
  address: String
  created_at: timestamptz
  id: uuid
  name: String
  store_inventory: inventory_arr_rel_insert_input
}

"""
response of any mutation on the table "store"
"""
type store_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [store!]!
}

"""
input type for inserting object relation for remote table "store"
"""
input store_obj_rel_insert_input {
  data: store_insert_input!

  """on conflict condition"""
  on_conflict: store_on_conflict
}

"""
on conflict condition type for table "store"
"""
input store_on_conflict {
  constraint: store_constraint!
  update_columns: [store_update_column!]! = []
  where: store_bool_exp
}

"""Ordering options when selecting data from "store"."""
input store_order_by {
  address: order_by
  created_at: order_by
  id: order_by
  name: order_by
  store_inventory_aggregate: inventory_aggregate_order_by
}

"""primary key columns input for table: store"""
input store_pk_columns_input {
  id: uuid!
}

"""
select columns of table "store"
"""
enum store_select_column {
  """column name"""
  address

  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  name
}

"""
input type for updating data in table "store"
"""
input store_set_input {
  address: String
  created_at: timestamptz
  id: uuid
  name: String
}

"""
update columns of table "store"
"""
enum store_update_column {
  """column name"""
  address

  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  name
}

type subscription_root {
  """
  fetch data from the table: "block"
  """
  block_connection(
    after: String
    before: String

    """distinct select on columns"""
    distinct_on: [block_select_column!]
    first: Int
    last: Int

    """sort the rows by one or more columns"""
    order_by: [block_order_by!]

    """filter the rows returned"""
    where: block_bool_exp
  ): blockConnection!

  """
  fetch data from the table: "brick"
  """
  brick_connection(
    after: String
    before: String

    """distinct select on columns"""
    distinct_on: [brick_select_column!]
    first: Int
    last: Int

    """sort the rows by one or more columns"""
    order_by: [brick_order_by!]

    """filter the rows returned"""
    where: brick_bool_exp
  ): brickConnection!

  """
  fetch data from the table: "cart_item"
  """
  cart_item_connection(
    after: String
    before: String

    """distinct select on columns"""
    distinct_on: [cart_item_select_column!]
    first: Int
    last: Int

    """sort the rows by one or more columns"""
    order_by: [cart_item_order_by!]

    """filter the rows returned"""
    where: cart_item_bool_exp
  ): cart_itemConnection!

  """
  fetch data from the table: "inventory"
  """
  inventory_connection(
    after: String
    before: String

    """distinct select on columns"""
    distinct_on: [inventory_select_column!]
    first: Int
    last: Int

    """sort the rows by one or more columns"""
    order_by: [inventory_order_by!]

    """filter the rows returned"""
    where: inventory_bool_exp
  ): inventoryConnection!
  node(
    """A globally unique id"""
    id: ID!
  ): Node

  """
  fetch data from the table: "organization"
  """
  organization_connection(
    after: String
    before: String

    """distinct select on columns"""
    distinct_on: [organization_select_column!]
    first: Int
    last: Int

    """sort the rows by one or more columns"""
    order_by: [organization_order_by!]

    """filter the rows returned"""
    where: organization_bool_exp
  ): organizationConnection!

  """
  execute function "organization_descendant_users" which returns "user_info"
  """
  organization_descendant_users_connection(
    after: String

    """
    input parameters for function "organization_descendant_users"
    """
    args: organization_descendant_users_args!
    before: String

    """distinct select on columns"""
    distinct_on: [user_info_select_column!]
    first: Int
    last: Int

    """sort the rows by one or more columns"""
    order_by: [user_info_order_by!]

    """filter the rows returned"""
    where: user_info_bool_exp
  ): user_infoConnection!

  """
  fetch data from the table: "product"
  """
  product_connection(
    after: String
    before: String

    """distinct select on columns"""
    distinct_on: [product_select_column!]
    first: Int
    last: Int

    """sort the rows by one or more columns"""
    order_by: [product_order_by!]

    """filter the rows returned"""
    where: product_bool_exp
  ): productConnection!

  """
  fetch data from the table: "store"
  """
  store_connection(
    after: String
    before: String

    """distinct select on columns"""
    distinct_on: [store_select_column!]
    first: Int
    last: Int

    """sort the rows by one or more columns"""
    order_by: [store_order_by!]

    """filter the rows returned"""
    where: store_bool_exp
  ): storeConnection!

  """
  fetch data from the table: "user_info"
  """
  user_info_connection(
    after: String
    before: String

    """distinct select on columns"""
    distinct_on: [user_info_select_column!]
    first: Int
    last: Int

    """sort the rows by one or more columns"""
    order_by: [user_info_order_by!]

    """filter the rows returned"""
    where: user_info_bool_exp
  ): user_infoConnection!
}

scalar timestamptz

"""
Boolean expression to compare columns of type "timestamptz". All fields are combined with logical 'AND'.
"""
input timestamptz_comparison_exp {
  _eq: timestamptz
  _gt: timestamptz
  _gte: timestamptz
  _in: [timestamptz!]
  _is_null: Boolean
  _lt: timestamptz
  _lte: timestamptz
  _neq: timestamptz
  _nin: [timestamptz!]
}

"""
columns and relationships of "user_info"
"""
type user_info implements Node {
  email: String
  id: ID!
  organization: Int!
}

"""
A Relay connection object on "user_info"
"""
type user_infoConnection {
  edges: [user_infoEdge!]!
  pageInfo: PageInfo!
}

type user_infoEdge {
  cursor: String!
  node: user_info!
}

"""
order by aggregate values of table "user_info"
"""
input user_info_aggregate_order_by {
  avg: user_info_avg_order_by
  count: order_by
  max: user_info_max_order_by
  min: user_info_min_order_by
  stddev: user_info_stddev_order_by
  stddev_pop: user_info_stddev_pop_order_by
  stddev_samp: user_info_stddev_samp_order_by
  sum: user_info_sum_order_by
  var_pop: user_info_var_pop_order_by
  var_samp: user_info_var_samp_order_by
  variance: user_info_variance_order_by
}

"""
order by avg() on columns of table "user_info"
"""
input user_info_avg_order_by {
  id: order_by
  organization: order_by
}

"""
Boolean expression to filter rows from the table "user_info". All fields are combined with a logical 'AND'.
"""
input user_info_bool_exp {
  _and: [user_info_bool_exp!]
  _not: user_info_bool_exp
  _or: [user_info_bool_exp!]
  email: String_comparison_exp
  id: Int_comparison_exp
  organization: Int_comparison_exp
}

"""
unique or primary key constraints on table "user_info"
"""
enum user_info_constraint {
  """unique or primary key constraint"""
  user_info_email_key

  """unique or primary key constraint"""
  user_info_pkey
}

"""
input type for incrementing numeric columns in table "user_info"
"""
input user_info_inc_input {
  id: Int
  organization: Int
}

"""
input type for inserting data into table "user_info"
"""
input user_info_insert_input {
  email: String
  id: Int
  organization: Int
}

"""
order by max() on columns of table "user_info"
"""
input user_info_max_order_by {
  email: order_by
  id: order_by
  organization: order_by
}

"""
order by min() on columns of table "user_info"
"""
input user_info_min_order_by {
  email: order_by
  id: order_by
  organization: order_by
}

"""
response of any mutation on the table "user_info"
"""
type user_info_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [user_info!]!
}

"""
on conflict condition type for table "user_info"
"""
input user_info_on_conflict {
  constraint: user_info_constraint!
  update_columns: [user_info_update_column!]! = []
  where: user_info_bool_exp
}

"""Ordering options when selecting data from "user_info"."""
input user_info_order_by {
  email: order_by
  id: order_by
  organization: order_by
}

"""primary key columns input for table: user_info"""
input user_info_pk_columns_input {
  id: Int!
}

"""
select columns of table "user_info"
"""
enum user_info_select_column {
  """column name"""
  email

  """column name"""
  id

  """column name"""
  organization
}

"""
input type for updating data in table "user_info"
"""
input user_info_set_input {
  email: String
  id: Int
  organization: Int
}

"""
order by stddev() on columns of table "user_info"
"""
input user_info_stddev_order_by {
  id: order_by
  organization: order_by
}

"""
order by stddev_pop() on columns of table "user_info"
"""
input user_info_stddev_pop_order_by {
  id: order_by
  organization: order_by
}

"""
order by stddev_samp() on columns of table "user_info"
"""
input user_info_stddev_samp_order_by {
  id: order_by
  organization: order_by
}

"""
order by sum() on columns of table "user_info"
"""
input user_info_sum_order_by {
  id: order_by
  organization: order_by
}

"""
update columns of table "user_info"
"""
enum user_info_update_column {
  """column name"""
  email

  """column name"""
  id

  """column name"""
  organization
}

"""
order by var_pop() on columns of table "user_info"
"""
input user_info_var_pop_order_by {
  id: order_by
  organization: order_by
}

"""
order by var_samp() on columns of table "user_info"
"""
input user_info_var_samp_order_by {
  id: order_by
  organization: order_by
}

"""
order by variance() on columns of table "user_info"
"""
input user_info_variance_order_by {
  id: order_by
  organization: order_by
}

scalar uuid

"""
Boolean expression to compare columns of type "uuid". All fields are combined with logical 'AND'.
"""
input uuid_comparison_exp {
  _eq: uuid
  _gt: uuid
  _gte: uuid
  _in: [uuid!]
  _is_null: Boolean
  _lt: uuid
  _lte: uuid
  _neq: uuid
  _nin: [uuid!]
}

